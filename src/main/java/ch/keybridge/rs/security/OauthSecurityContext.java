/*
 * Copyright 2020 Key Bridge. All rights reserved. Use is subject to license
 * terms.
 *
 * This software code is protected by Copyrights and remains the property of
 * Key Bridge and its suppliers, if any. Key Bridge reserves all rights in and to
 * Copyrights and no license is granted under Copyrights in this Software
 * License Agreement.
 *
 * Key Bridge generally licenses Copyrights for commercialization pursuant to
 * the terms of either a Standard Software Source Code License Agreement or a
 * Standard Product License Agreement. A copy of either Agreement can be
 * obtained upon request by sending an email to info@keybridgewireless.com.
 *
 * All information contained herein is the property of Key Bridge and its
 * suppliers, if any. The intellectual and technical concepts contained herein
 * are proprietary.
 */
package ch.keybridge.rs.security;

import java.util.Collection;
import javax.ws.rs.core.SecurityContext;

/**
 * The OAuth 2.0 Authorization Framework: Bearer Token Usage for OAuth 2.0
 * Client Authentication and Authorization Grants
 * <p>
 * HTTP BEARER {@link SecurityContext} implementation for opaque Token based
 * bearer authentication. An opaque token reveals no details other than the
 * value itself (like a random string).
 *
 * @see <a href="https://tools.ietf.org/html/rfc6750">Oauth bearer profile</a>
 * @author Key Bridge
 * @since v0.8.0 created 2020-08-12
 */
public class OauthSecurityContext extends AbstractTokenSecurityContext {

  /**
   * The OAuth name of the key (i.e. the key id), which is an identifier
   * generated by the resource server.
   */
  private final String kid;
  /**
   * The OAuth session key generated by the authorization server. This is the
   * shared **consumer key** portion of the token response.
   */
  private final String macKey;

  /**
   * Default, fully qualified constructor.
   *
   * @param kid    OAuth name of the key
   * @param macKey OAuth session key generated
   * @param userId The API authorization key of the current authenticated user.
   * @param scope  The list of scopes associated with the current user;
   * @param secure Whether this request was made using a secure channel, such as
   *               HTTPS.
   */
  public OauthSecurityContext(String kid, String macKey, String userId, Collection<String> scope, boolean secure) {
    super(userId, scope, secure);
    this.kid = kid;
    this.macKey = macKey;
  }

  public String getKid() {
    return kid;
  }

  public String getMacKey() {
    return macKey;
  }

}
